############################################################
# Cube configuration
############################################################
# - alias: Cube event flip90
#   trigger:
#     platform: event
#     event_type: xiaomi_aqara.cube_action
#     event_data:
#       entity_id: binary_sensor.cube
#       action_type: flip90
#   action:
#     service: light.toggle
#     entity_id: light.light_living

# - alias: Cube event flip180
#   trigger:
#     platform: event
#     event_type: xiaomi_aqara.cube_action
#     event_data:
#       entity_id: binary_sensor.cube
#       action_type: flip180
#   action:
#   - service: light.toggle
#     entity_id: light.light_bar

# - alias: Cube event tap_twice
#   trigger:
#     platform: event
#     event_type: xiaomi_aqara.cube_action
#     event_data:
#       entity_id: binary_sensor.cube
#       action_type: tap_twice
#   action:
#   - service: light.toggle
#     entity_id: light.lights_downstairs

# - alias: Cube event move
#   trigger:
#     platform: event
#     event_type: xiaomi_aqara.cube_action
#     event_data:
#       entity_id: binary_sensor.cube
#       action_type: move
#   action:
#     service: input_boolean.toggle
#     entity_id: input_boolean.block_autolight_living

# - alias: Cube event shake_air
#   trigger:
#     platform: event
#     event_type: xiaomi_aqara.cube_action
#     event_data:
#       entity_id: binary_sensor.cube
#       action_type: shake_air
#   action:
#   - service: switch.toggle
#     entity_id: light.scene_movie

# - alias: Cube event rotate
#   trigger:
#     platform: event
#     event_type: xiaomi_aqara.cube_action
#     event_data:
#       entity_id: binary_sensor.cube
#       action_type: rotate
#   action:
#     service: light.turn_on
#     entity_id: light.bulbs_bar
#     data:
#       brightness: >
#         {% set state = (states.light.barwindow_light.attributes.brightness + (trigger.event.data.action_value|int)*4) | int -%}
#         {%-  if state > 255 -%}
#           {%- set state  = 255 -%}
#         {%-  elif state < 0 -%}
#           {%- set state = 0 -%}
#         {%- endif %}
#         {{ state }}



############################################################
# Notify when new Home Assistant updates are available
############################################################
- alias: Update Available Notifications
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.updater
    from: 'off'
    to: 'on'
  action:
    service: notify.mobile_app_jerome_s_iphone
    data:
      message: Home Assistant {{ state_attr('binary_sensor.updater', 'newest_version') }} is available.


############################################################
# Send event 2MN_AFTER_HASS_START, 2 mn after homeassistant started
############################################################
- alias: throw event 2 minute after homeassistant starts
  initial_state: 'on'
  trigger:
    platform: homeassistant
    event: start
  action:
    - delay:
        minutes: 2
    - event: 2MN_AFTER_HASS_START


############################################################
# Notify on power problem
############################################################
- alias: Power Problem Notification
  initial_state: 'on'
  trigger:
  - platform: numeric_state
    entity_id: sensor.rpi_power_status
    value_template: '{{ state.attributes.value }}'
    above: 0
    for:
      minutes: 5
  action:
  - service: persistent_notification.create
    data:
      message: >-
        RPI Power reported {{ states.sensor.rpi_power_status.state }}.
        The state had changed from {{ trigger.from_state.state }}
      title: Power Supply Issue
      notification_id: power_alert
  - service: notify.ALL_MOBILES
    data:
      message: >-
        RPI Power reported {{ states.sensor.rpi_power_status.state }}.
        The state had  changed from {{ trigger.from_state.state }}
      title: Power Supply Issue

############################################################
# notify when HACS updates are available
############################################################
- alias: Create a notification when there is updates pending in HACS
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: sensor.hacs
  condition:
    - condition: template
      value_template: "{{ states(trigger.entity_id) != 'unknown'}}"
    - condition: template
      value_template: "{{ (states(trigger.entity_id) | float) != 0}}"
  action:
    service: persistent_notification.create
    data:
      title: Updates pending in HACS
      message: >-
        {% for repo in state_attr(trigger.entity_id, 'repositories') %}
          **{{ repo.display_name }}** _{{ repo["installed_version"] }}_ -> _{{ repo["available_version"] }}_
        {% endfor %}


############################################################
# Notify on Xiaomi gateway deconnection
############################################################
- alias: Xiaomi unavailable - Restart
  # initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.smoke_sensor
      to: 'unavailable'
      for:
        minutes: 3
    - platform: event
      event_type: 2MN_AFTER_HASS_START
  condition:
    - condition: state
      entity_id: binary_sensor.smoke_sensor
      state: 'unavailable'
  action:
    - service: persistent_notification.create
      data:
        message: Xiaomi gateway is unavailable!
        title: System Issue
        notification_id: xiaomi_alert
    - service: notify.ALL_MOBILES
      data:
        message: Xiaomi gateway is unavailable!
        title: System Issue
    - service: switch.turn_off
      entity_id: switch.xiaomi_gateway_plug
    - delay:
        minutes: 1
    - service: switch.turn_on
      entity_id: switch.xiaomi_gateway_plug
    - delay:
        minutes: 1
    - service: shell_command.reboot_pi


############################################################
# Notify on Netatmo gateway deconnection
############################################################
- alias: Netatmo unavailable - Restart
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: climate.netatmo_living_room
      to: 'unavailable'
      for:
        minutes: 20
    - platform: state
      entity_id: sensor.netatmo_garden_temperature
      to: 'unavailable'
      for:
        minutes: 20
    - platform: state
      entity_id: sensor.netatmo_living_room_temperature
      to: 'unavailable'
      for:
        minutes: 20
    # - platform: event
    #   event_type: 2MN_AFTER_HASS_START
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: climate.netatmo_living_room
      state: 'unavailable'
    - condition: state
      entity_id: sensor.netatmo_garden_temperature
      state: 'unavailable'
    - condition: state
      entity_id: sensor.netatmo_living_room_temperature
      state: 'unavailable'
  action:
    - service: persistent_notification.create
      data:
        message: Netatmo services are unavailable!
        title: System Issue
        notification_id: netatmo_alert
    - service: notify.ALL_MOBILES
      data:
        message: Netatmo services are unavailable!
        title: System Issue
    - service: homeassistant.restart
